{"version":3,"sources":["reportWebVitals.ts","../../dist/ReactHookFormHandler/ReactHookFormHandler.js","../../dist/Form/Form.js","Input.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","console","error","ReactHookFormHandler","reactHookFormContext","this","formState","isValid","isSubmitting","wasSubmitted","isSubmitted","name","options","register","value","getValues","errors","formatFieldErrors","isTouched","touchedFields","shouldValidate","shouldTouch","setValue","Object","entries","types","map","errorType","message","__rest","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","Form","_a","form","onSubmit","formProps","noValidate","children","concreteFormConfig","_jsx","ConcreteFormProvider","assign","formHandler","config","FormProvider","handleSubmit","Input","fieldProps","inputProps","useFormState","controlledFieldProps","useControlProps","useControlState","disabled","style","color","wait","delay","a","Promise","resolve","setTimeout","App","useForm","defaultValues","foo","mode","criteriaMode","args","log","background","padding","required","pattern","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cdf84bc.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    }).catch(console.error)\n  }\n}\n\nexport default reportWebVitals\n","export default class ReactHookFormHandler {\n    constructor(reactHookFormContext) {\n        this.reactHookFormContext = reactHookFormContext;\n    }\n    getFormState() {\n        const formState = this.reactHookFormContext.formState;\n        return {\n            isValid: !!formState.isValid,\n            isSubmitting: !!formState.isSubmitting,\n            wasSubmitted: !!formState.isSubmitted,\n        };\n    }\n    getControlProps(name, options) {\n        return this.reactHookFormContext.register(name, options);\n    }\n    getControlState(name) {\n        const formState = this.reactHookFormContext.formState;\n        return {\n            value: this.reactHookFormContext.getValues(name),\n            errors: this.formatFieldErrors(formState.errors[name]),\n            isTouched: !!formState.touchedFields[name],\n        };\n    }\n    setFieldValue(name, value, shouldValidate, shouldTouch) {\n        this.reactHookFormContext.setValue(name, value, {\n            shouldValidate,\n            shouldTouch,\n        });\n    }\n    formatFieldErrors(errors) {\n        return Object.entries((errors === null || errors === void 0 ? void 0 : errors.types) || {}).map(([errorType, message]) => {\n            // todo : use generic translations when no message is provided\n            return typeof message === 'string' ? message : errorType;\n        }) || [];\n    }\n}\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { ConcreteFormProvider } from '@concrete-form/core';\nimport { FormProvider } from 'react-hook-form';\nimport ReactHookFormHandler from '../ReactHookFormHandler';\nconst Form = (_a) => {\n    var { form, onSubmit, formProps, noValidate, children } = _a, concreteFormConfig = __rest(_a, [\"form\", \"onSubmit\", \"formProps\", \"noValidate\", \"children\"]);\n    return (_jsx(ConcreteFormProvider, Object.assign({ formHandler: new ReactHookFormHandler(form), config: concreteFormConfig }, { children: _jsx(FormProvider, Object.assign({}, form, { children: _jsx(\"form\", Object.assign({ onSubmit: form.handleSubmit(onSubmit), noValidate: noValidate }, formProps, { children: children }), void 0) }), void 0) }), void 0));\n};\nexport default Form;\n","import React from 'react'\nimport { useControlProps, useControlState, useFormState, ControlProps } from '@concrete-form/core'\n\ntype InputProps = ControlProps & React.InputHTMLAttributes<HTMLInputElement>\n\n/*\n * this is an example of a concrete form UI kit implementation\n */\nconst Input: React.FC<InputProps> = ({ name, fieldProps, ...inputProps }) => {\n  const { isSubmitting } = useFormState()\n\n  const controlledFieldProps = useControlProps(name, fieldProps)\n\n  const { errors } = useControlState(name)\n  const disabled = inputProps.disabled ?? controlledFieldProps.disabled ?? isSubmitting\n\n  return (\n    <>\n      <input {...inputProps} {...controlledFieldProps} disabled={disabled} />\n      { errors.map((error: string) => (\n        <div key={error} style={{ color: '#f00' }}>{ error }</div>\n      )) }\n      <br />\n    </>\n  )\n}\n\nexport default Input\n","import React from 'react'\nimport { useForm } from 'react-hook-form'\nimport Form from '@concrete-form/react-hook-form'\n\nimport Input from './Input'\n\nconst wait = async (delay: number) => await new Promise(resolve => setTimeout(resolve, delay))\n\nconst App: React.FC = () => {\n  const form = useForm({ defaultValues: { foo: 'Foo' }, mode: 'onTouched', criteriaMode: 'all' })\n\n  const onSubmit = async (...args: any[]) => {\n    await wait(2000)\n    console.log(args)\n  }\n\n  return (\n    <>\n      <h1>Demo</h1>\n      <Form\n        form={form}\n        onSubmit={onSubmit}\n        formProps={{\n          style: { background: '#ececec', padding: 15 },\n        }}\n        noValidate\n      >\n        <Input\n          name=\"foo\"\n          fieldProps={{\n            required: 'This field is required',\n            pattern: { value: /^[a-z]+$/i, message: 'This field only accept letters' },\n          }}\n        />\n\n        <Input name=\"bar\" fieldProps={{ required: true }} />\n\n        <br />\n        <button type=\"submit\">Send</button>\n\n      </Form>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport reportWebVitals from './reportWebVitals'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\nreportWebVitals()\n"],"sourceRoot":""}